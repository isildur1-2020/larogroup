version: '3'

volumes:
  caddy-data: {}
  caddy-config: {}

networks:
  caddy:

services:
  mongodb:
    image: mongo:5
    restart: unless-stopped
    container_name: ${MONGO_HOST}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports: 
      - "27017:27017"
    volumes:
      - ./mongo-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: ['--auth']

  app:
    restart: unless-stopped
    depends_on:
      - mongodb
    build:
      context: .
      target: prod
      dockerfile: Dockerfile
    image: laroaccess-app
    container_name: laroaccess-app
    ports:
      - "${PORT}:${PORT}"
    volumes:
      - ./static:/app/static
    networks:
      - caddy
    environment:
      PORT: ${PORT}
      JWT_SECRET: ${JWT_SECRET}
      MONGO_HOST: ${MONGO_HOST}
      ROOT_USERNAME: ${ROOT_USERNAME}
      ROOT_PASSWORD: ${ROOT_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}
      MONGO_REMOTE_HOST: ${MONGO_REMOTE_HOST}
  
  caddy:
    restart: unless-stopped
    depends_on:
      - app
    build: 
      context: .
      dockerfile: ./caddy/Dockerfile
    image: laroaccess-caddy
    container_name: laroaccess-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy-data:/data
      - caddy-config:/config
    networks:
      - caddy
    environment:
      - PORT=${PORT}
      - DOMAIN_NAME=${DOMAIN_NAME}
      - SSL_CERT_EMAIL=${SSL_CERT_EMAIL}